export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).send("Method Not Allowed");
  }

  const { message } = req.body;

  if (!message) {
    console.log("‚ö†Ô∏è –ù–µ—Ç message –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞");
    return res.status(200).send("No message");
  }

  const chatId = message.chat?.id;
  const text = message.text?.toLowerCase() || "";

  const firstName = message.from?.first_name || "";
  const lastName = message.from?.last_name || "";
  const username = message.from?.username || "";
  const userId = message.from?.id;

  // üîç –õ–æ–≥
  console.log("üÜï –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç:");
  console.log(`üë§ –ò–º—è: ${firstName} ${lastName}`);
  console.log(`üîó Username: @${username}`);
  console.log(`üÜî ID: ${userId}`);
  console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${text}`);

  const helpText = `‚ùì <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Go Travel</b>:

<b>‚Äî –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –ö–∞–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª—å?
‚Ä¢ –ö–∞–∫ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?
‚Ä¢ –ü–æ—á–µ–º—É –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–µ—Ä–µ–ª—ë—Ç?

üëá –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É:`;

  try {
    if (!chatId) {
      return res.status(200).send("No chat ID");
    }

    if (text === "/start") {
      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∞
      await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chatId,
          text: helpText,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "üì¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É",
                  url: "https://t.me/Parshin_Alex" // üîÅ –ü–æ–¥—Å—Ç–∞–≤—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                }
              ]
            ]
          }
        }),
      });
    } else {
      // –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chatId,
          text: "‚úâÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.",
        }),
      });

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
      await fetch(`https://api.telegram.org/bot${process.env.BOT_TOKEN}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: process.env.MANAGER_CHAT_ID,
          text: `üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>:\n\nüë§ <b>${firstName} ${lastName}</b>\nüîó @${username || "–±–µ–∑ username"}\nüÜî <code>${userId}</code>\n\nüí¨ <i>${message.text}</i>`,
          parse_mode: "HTML",
        }),
      });
    }

    res.status(200).send("ok");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", error);
    res.status(500).send("Error");
  }
}
